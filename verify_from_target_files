#!/usr/bin/env python
"""
Given a target-files zipfile, connect to the device over ADB and verify that
the installed system exactly matches that build.

Usage: verify_from_target_files <target-files-package>

You need to have ADB connected with root access; use "adb root" on userdebug
builds before running this script
"""

import sys
import hashlib
import os
import subprocess
import zipfile
import re
import tempfile

# Android Release Tools
sys.path.append("build/tools/releasetools")
import common

sys.path.append("device/intel/build/releasetools")
import intel_common

OPTIONS = common.OPTIONS
exp = "RETURN=([0-9]+)"
regex_ret = re.compile(exp, re.MULTILINE)
symlink_attr = (0120000 << 16L)
regfile_attr = (0100000 << 16L)

def get_hash_and_size(zip_archive, filename):
    fd = zip_archive.open(filename)
    data = fd.read()
    fd.close()
    h = hashlib.sha1(data).hexdigest()
    s = len(data)
    return (h, s)

def get_hash_and_size_from_file(filename):
    fd = open(filename)
    data = fd.read()
    fd.close()
    h = hashlib.sha1(data).hexdigest()
    s = len(data)
    return (h, s)


def check_bootimage(name, unpack_dir):
    img = common.GetBootableImage(name, name+".img", unpack_dir,
                name.upper())

    h = hashlib.sha1(img.data).hexdigest()
    s = len(img.data)
    print "Checking", name, "image"
    adb_shell_command("applypatch -c EMMC:%s:%s:%s" % (OPTIONS.info_dict["fstab"]["/" + name].device,s,h))


# ADB is dumb and doesn't propagate failed shell commands back to the caller.
# https://code.google.com/p/android/issues/detail?id=3254
def adb_shell_command(cmd, fail_ok=False):
    global success
    out = subprocess.check_output(['out/host/linux-x86/bin/adb','shell', cmd + '; echo RETURN=$?']).strip()
    m = regex_ret.split(out)
    retval = int(m[1])
    output = m[0].strip()
    if retval and fail_ok != True:
        success = False
        print "FAILED 'adb shell %s' returned %d\n%s" % (cmd, retval, output)
        return None
    return output


def main(argv):

    if (len(argv) != 1):
        print __doc__
        sys.exit(1)

    print "Extracting target files package..."
    unpack_dir, tfp = common.UnzipTemp(argv[0])
    success = True
    OPTIONS.info_dict = common.LoadInfoDict(tfp)

    if (adb_shell_command("echo otasums > /sys/power/wake_lock") == None or
            adb_shell_command("mount -o remount,rw /") == None or
            adb_shell_command("mkdir /mnt/bootloader") == None or
            adb_shell_command("mount -t vfat %s /mnt/bootloader" % (OPTIONS.info_dict["fstab"]["/bootloader"].device,)) == None):
        sys.exit(1)

    print "Extracting bootloader archive..."
    data = intel_common.GetBootloaderImageFromTFP(unpack_dir)
    image = common.File("bootloader.img", data).WriteToTemp()
    esp_root = tempfile.mkdtemp(prefix="bootloader-")
    OPTIONS.tempfiles.append(esp_root)
    intel_common.add_dir_to_path("/sbin")
    subprocess.check_output(["mcopy", "-s", "-i", image.name, "::*", esp_root]);
    image.close();

    sys.stdout.write("Checking boot images...\n")
    for bootimage in ["boot", "recovery"]:
        check_bootimage(bootimage, unpack_dir)

    sys.stdout.write("Checking bootloader...\n")
    for dpath, dname, fnames in os.walk(esp_root):
        for fname in fnames:
            # Capsule update file -- gets consumed and deleted by the firmware
            # at first boot, shouldn't try to check it
            if (fname == "BIOSUPDATE.fv"):
                continue
            abspath = os.path.join(dpath, fname)
            relpath = os.path.relpath(abspath, esp_root)

            print "Checking", relpath
            h, s = get_hash_and_size_from_file(abspath)
            adb_shell_command("applypatch -c /mnt/bootloader/%s %s" % (relpath, h))


    sys.stdout.write("Checking system partition..")
    for zi in tfp.infolist():
        fn = zi.filename

        # Skip anything that isn't a regular file
        if not (zi.external_attr & regfile_attr == regfile_attr):
            continue

        # skip symlinks
        if (zi.external_attr & symlink_attr == symlink_attr):
            continue

        sys.stdout.write(".")
        sys.stdout.flush()
        if fn.startswith("SYSTEM/") and not fn.endswith("/"):
            h, s = get_hash_and_size(tfp, fn)
            adb_shell_command("applypatch -c /system/%s %s" % (fn[7:], h))
    print
    if success:
        print "All tests completed"
    else:
        print "OTA Tests FAILED!"
        sys.exit(1)


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    finally:
        adb_shell_command("echo otasums > /sys/power/wake_unlock", True);
        adb_shell_command("umount /mnt/bootloader", True)
        adb_shell_command("rm -r /mnt/bootloader", True)
        adb_shell_command("mount -o remount,ro /", True)
        common.Cleanup()
