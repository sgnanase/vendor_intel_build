#!/usr/bin/env python
#
# Copyright (C) 2008 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Generates a VFAT EFI System partition image from a provided
target-files-package
"""

import sys
import os
import tempfile
import zipfile
import shutil

if sys.hexversion < 0x02040000:
    print >> sys.stderr, "Python 2.4 or newer is required."
    sys.exit(1)

# Android Release Tools
sys.path.append("build/tools/releasetools")
import common

sys.path.append("device/intel/build/releasetools")
import intel_common

OPTIONS = common.OPTIONS
OPTIONS.bootable = False

def main(argv):

    def option_handler(o, a):
        if o in ("-u", "--bootable"):
            OPTIONS.bootable = True
        else:
            return False

    args = common.ParseOptions(argv, __doc__, extra_opts="u",
            extra_long_opts=["bootable"])

    if len(args) != 2:
        common.Usage(__doc__)
        sys.exit(1)

    print "unzipping target-files..."
    OPTIONS.input_tmp, input_zip = common.UnzipTemp(args[0])
    OPTIONS.info_dict = common.LoadInfoDict(input_zip)

    extras = []
    if OPTIONS.bootable:
        tf = tempfile.NamedTemporaryFile()
        tf.write("foo")
        tf.flush()
        data = intel_common.GetBootloaderImageFromTFP(OPTIONS.input_tmp,
                extra_files=[tf.name,"force_fastboot"], autosize=True)
        tf.close()
    else:
        data = intel_common.GetBootloaderImageFromTFP(OPTIONS.input_tmp)

    f = open(args[1], "w")
    f.write(data)
    f.close()

    common.Cleanup()

if __name__ == '__main__':
    try:
        common.CloseInheritedPipes()
        main(sys.argv[1:])
    except common.ExternalError, e:
        print
        print "   ERROR: %s" % (e,)
        print
        sys.exit(1)

