#!/bin/bash

# Bail on any errors
set -e

# Allow job control
set -m

export TESTKEYS=device/intel/build/testkeys
export PRODKEYS=device/intel/build/testkeys/production-test
export ANDROID_PW_FILE=$PRODKEYS/pwfile

while getopts "qst:" opt; do
    case $opt in
        s)
            set -x
            ;;
        q)
            export QUICK=1
            ;;
        t)
            export TFP=$OPTARG
            ;;
        \?)
            echo "Usage:"
            echo
            echo "  ota-test-prepare [-s -q]"
            echo "    Create two builds A and B with deliverables for performing OTA + Secure Boot test cases"
            echo
            echo "OR"
            echo
            echo "  ota-test-prepare [-s] -t <path to TFP zipfile> <build name>"
            echo "    Use an existing TFP and create 1 set of deliverables for performing OTA + Secure Boot test cases"
            echo "    The ota/ directory will contain a re-signed TFP, factory archive, and full-image OTA."
            echo "    The build name identifies the build, using A or B is typical"
            echo
            echo "Valid options:"
            echo "-q: Just build testkey signed images for the 'quick' test cases"
            echo "-s: Show commands being run"
            echo "-t: Don't do own build; use supplied target-files to create a re-signed release"
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))

function sign_tfp {
    t1=`mktemp tmp.tfp1.XXXXXXXX`

    ./build/tools/releasetools/sign_target_files_apks  \
            --verbose \
            --replace_verity_public_key $PRODKEYS/verity.pub \
            --replace_verity_private_key $PRODKEYS/verity \
            --default_key_mappings $PRODKEYS $1 $t1

    ./device/intel/build/releasetools/sign_target_files_efis \
            --verbose \
            --oem-key $PRODKEYS/oem \
            --oem-keystore $PRODKEYS/verity \
            --key-mapping loader.efi=$PRODKEYS/DB \
            $t1 $2
    rm $t1
}

function build_provimg {
    t2=`mktemp tmp.fastboot-usb.XXXXXXXX`
    t3=`mktemp tmp.bootloader.XXXXXXXX`
    t4=`mktemp tmp.img.XXXXXXXX`
    t5=`mktemp tmp.gpt.XXXXXXXX`

    ./device/intel/build/releasetools/bootloader_from_target_files \
            --bootable --verbose $1 $t2

    ./device/intel/build/releasetools/bootloader_from_target_files \
            --verbose $1 $t3

    ./build/tools/releasetools/img_from_target_files \
            --verbose $1 $t4

    unzip -p $1 RADIO/gpt.ini > $t5

    # FIXME build flashfiles.zip instead!
    ./device/intel/build/generate_factory_images \
	    --product $TARGET_PRODUCT --release otatest \
            --bootloader $t3 \
            --update-archive $t4 \
            --gpt $t5 \
            --unlock --erase \
            --sleeptime 45 \
            --input $t2=fastboot-usb.img \
            --output $2

    rm -f $t2 $t3 $t4 $t5
}

if [[ -n "$TFP" ]]; then
    if [[ -z "$1" ]]; then
        echo "No build name provided!"
        exit 1
    fi
    mkdir -p ota/
    sign_tfp $TFP ota/tfp-${1}.zip
    build_provimg ota/tfp-${1}.zip ota/factory-${1}.tgz
    ./build/tools/releasetools/ota_from_target_files --block --verbose ota/tfp-${1}.zip ota/ota-${1}.zip
    echo "All done!"
    exit
fi

if [ -z "$ANDROID_BUILD_TOP" ]; then
    echo "Run lunch first!"
    exit 1
fi

pushd $ANDROID_BUILD_TOP &> /dev/null

rm -rf ota/
mkdir ota/

# FIXME how to get the boot images to come out differently?

echo "Building source software version A"
make -j12 target-files-package otatools keystore_signer &> ota/make-A.log
cp $OUT/obj/PACKAGING/target_files_intermediates/$TARGET_PRODUCT-target_files*.zip ota/tfp-A-testkey.zip

# Not sure why rebuilds of the EFI binaries don't come out exactly the same, probably
# embedded date stamps or something. Whatever...

echo "Regenerating UEFI Binaries to create artificial deltas"

pushd hardware/intel/kernelflinger
./generate-prebuilts.sh &> $ANDROID_BUILD_TOP/ota/kernelflinger.log
popd

echo "Cleaning source tree"
make installclean &> /dev/null

echo "Building target software version B"
make -j12 target-files-package otatools keystore_signer &> ota/make-B.log
cp $OUT/obj/PACKAGING/target_files_intermediates/$TARGET_PRODUCT-target_files*.zip ota/tfp-B-testkey.zip

# Clean up the changed EFI binaries from the rebuild
pushd hardware/intel/efi_prebuilts/kernelflinger
git reset --hard
popd

if [[ "$QUICK" != "1" ]]; then
    echo "Re-signing target-files-packages"
    sign_tfp ota/tfp-A-testkey.zip ota/tfp-A.zip
    sign_tfp ota/tfp-B-testkey.zip ota/tfp-B.zip
fi

echo "Building OTA update packages"
if [[ "$QUICK" != "1" ]]; then
    ./build/tools/releasetools/ota_from_target_files \
            --block --verbose ota/tfp-A.zip ota/ota-A.zip
    ./build/tools/releasetools/ota_from_target_files \
            --block --verbose ota/tfp-B.zip ota/ota-B.zip
    ./build/tools/releasetools/ota_from_target_files \
            --block --verbose -i ota/tfp-A.zip ota/tfp-B.zip ota/ota-A-B.zip
else
    ./build/tools/releasetools/ota_from_target_files \
            --block --verbose ota/tfp-A-testkey.zip ota/ota-A-testkey.zip
    ./build/tools/releasetools/ota_from_target_files \
            --block --verbose -i ota/tfp-A-testkey.zip ota/tfp-B-testkey.zip ota/ota-A-B-testkey.zip
fi

echo "Building provisioning media"
if [[ "$QUICK" != "1" ]]; then
    build_provimg ota/tfp-A.zip ota/factory-A.tgz
    build_provimg ota/tfp-B.zip ota/factory-B.tgz
else
    build_provimg ota/tfp-A-testkey.zip ota/factory-A-testkey.tgz
fi

popd
echo "OTA preparations complete!"

